After Kevin was left alone by his family he took a flight to reach New York City. He was in awe with the skyline of the city. Being curious in nature he wanted to find the difference of height between the tallest and the shortest building. Since he had an ample amount of time he started doing some random arithmetic computations. He decided to either increase or decrease the height of every tower by k (exactly once) where k > 0.



The task is to minimize the difference between the heights of the longest and the shortest tower after modifications and output this difference.



INPUT



You will be given the number of towers in the skyline by N which followed by N integers which signify the height of the N towers. You will be given an integer k by which he increases or decreases the tower's height.



OUTPUT



You have to output the minimum possible difference in height of the tallest and the smallest tower after modifications.



SAMPLE INPUT



3

1 15 10

6



SAMPLE OUTPUT



5


Explanation



We change 1 to 7, 15 to 9 and 10 to 4. The maximum difference is 5 (between 4 and 9). We can't get a lower difference.



CONSTRAINTS



N <=1000



k>=0



Primary Solution Code editor
#include <stdio.h> 

int min(int a,int b){
    if(a>=b)return b;
    return a;
}

void swap(int* a, int* b)
{
    int temp = *a;
    *a=*b;*b=temp;
}

void merge(int arr[], int l, int m, int r) 
{ 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
    int L[n1], R[n2]; 
    for (i = 0; i < n1; i++) 
        L[i] = arr[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = arr[m + 1+ j]; 
  
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
  
    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i++; 
        k++; 
    }
    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j++; 
        k++; 
    } 
}

void mergeSort(int arr[], int l, int r) 
{ 
    if (l < r) 
    { 
        int m = l+(r-l)/2; 
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
}

int getMinDiff(int arr[], int n, int k) 
{ 
    if (n == 1) 
       return 0; 
    
    int ans = arr[n-1] - arr[0]; 
  
    int small = arr[0] + k; 
    int big = arr[n-1] - k; 
    if (small > big) 
       swap(&small, &big); 

    for (int i = 1; i < n-1; i ++) 
    { 
        int subtract = arr[i] - k; 
        int add = arr[i] + k; 
  
        if (subtract >= small || add <= big) 
            continue; 
  
        if (big - subtract <= add - small) 
            small = subtract; 
        else
            big = add; 
    } 
    return  min(ans, big - small); 
} 

int main() 
{ 
    int n,i,arr[1001],k;
    scanf("%d",&n);
    for(i=0;i<n;i++) scanf("%d",&arr[i]);
    scanf("%d",&k);
    mergeSort(arr,0,n-1); 
    printf("%d",getMinDiff(arr, n, k));
    return 0; 
}