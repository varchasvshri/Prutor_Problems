PROBLEM - 
Given a number of friends who have to give or take some amount of money from one another. You have to minimize the Cash Flow among the given set of friends who have borrowed money from each other.
You will be given how many friends are there by N. Also you will be given a matrix of integers in which element at ith row and jth column indicates the amount that person i needs to pay person j.
You have to output how much money every nth friend should pay to mth friend in order to clear his/her debt and also minimizing the Cash Flow. 

Input - 
3
0 1000 2000
0 0 5000
0 0 0

Output - 
Person 2 pays 4000 to Person 3
Person 1 pays 3000 to Person 3

SOLUTION-
#include <stdio.h> 
int N;
// A function that returns index of maximum value in arr[] 
int getMax(int arr[]) 
{ 
    int maxInd = 0; 
    for (int i=1; i<N; i++) 
        if (arr[i] > arr[maxInd]) 
            maxInd = i; 
    return maxInd; 
} 

// A function that returns index of minimum value in arr[] 
int getMin(int arr[]) 
{ 
    int minInd = 0; 
    for (int i=1; i<N; i++) 
        if (arr[i] < arr[minInd]) 
            minInd = i; 
    return minInd; 
} 
  
// A function to return minimum of 2 values 
int minOf2(int x, int y) 
{ 
    return (x<y)? x: y; 
} 
  
// amount[p] indicates the net amount to be credited/debited 
// to/from person 'p' 
// If amount[p] is positive, then i'th person will amount[i] 
// If amount[p] is negative, then i'th person will give  -amount[i] 
void minCashFlowRec(int amount[]) 
{ 
    // Find the indexes of minimum and maximum values in amount[] 
    // amount[mxCredit] indicates the maximum amount to be given 
    //                  (or credited) to any person . 
    // And amount[mxDebit] indicates the maximum amount to be taken 
    //                  (or debited) from any person. 
    
    int mxCredit = getMax(amount), mxDebit = getMin(amount); 
  
    // If both amounts are 0, then all amounts are settled 
    if (amount[mxCredit] == 0 && amount[mxDebit] == 0) 
        return; 
  
    // Find the minimum of two amounts 
    int min = minOf2(-amount[mxDebit], amount[mxCredit]); 
    amount[mxCredit] -= min; 
    amount[mxDebit] += min; 
    
    // If minimum is the maximum amount to be 
    printf("Person %d pays %d to Person %d\n",mxDebit+1,min,mxCredit+1);
    //cout << "Person " << mxDebit+1 << " pays " << min 
      //   << " to " << "Person " << mxCredit+1 << endl; 
  
    // Recur for the amount array.  Note that it is guaranteed that 
    // the recursion would terminate as either amount[mxCredit]  
    // or  amount[mxDebit] becomes 0 
    minCashFlowRec(amount);
} 
  
// finds and prints the minimum cash flow to settle all debts. 
void minCashFlow(int graph[][N]) 
{ 
    int k,amount[N]; 
    for(k=0;k<N;k++)
        amount[k] = 0;
      // Calculate the net amount to be paid to person 'p', and 
    // stores it in amount[p]. The value of amount[p] can be 
    // calculated by subtracting debts of 'p' from credits of 'p' 
    for (int p=0; p<N; p++) 
       for (int i=0; i<N; i++) 
          amount[p] += (graph[i][p] -  graph[p][i]); 
  
    minCashFlowRec(amount); 
} 

int main() 
{ 
    int i,j;
    scanf("%d",&N);
    // graph[i][j] indicates the amount that person i needs to 
    // pay person j 
    int graph[N][N];
    for(i=0;i<N;i++){
        for(j=0;j<N;j++){
            scanf("%d",&graph[i][j]);}}
    
    // Print the solution 
    minCashFlow(graph); 
    return 0; 
}

INITIAL TEMPLATE - 
#include <stdio.h>

int main()
{
return 0;
}